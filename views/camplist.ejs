<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Camp-List</title>
  <link rel="stylesheet" href="donor.css">
  <style>
    /* General table styles */
    table {
      width: 100%;
      border-collapse: collapse;
      background-color: #ffffff;
      color: white;
    }
  
    /* Style table rows and cells */
    .stock-row {
      color: white;
    }
  
    td {
      padding: 8px;
      text-align: center; /* Center-align all cells */
      border: 1px solid #555; 
      font-size: 16px;
    }
  
    /* Universal style for all form controls */
    input, select, textarea {
      width: 90%; /* Adjust the width for uniformity */
      padding: 4px;
      text-align: center;
      border: 1px solid #ffffff;
      border-radius: 4px;
      font-size: 16px;
      background-color: #ffffff; /* Light background for visibility */
      color: #333; /* Dark text for readability */
    }
  
    /* Style submit button */
    input[type="submit"] {
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
      border: none;
      padding: 6px 12px;
      border-radius: 5px;
      text-align: center;
      display: inline-block;
      margin: auto;
      width: 120px;
    }
    input[type="text"],
    input[type="date"],
    input[type="number"],
    input[type="password"],
    input[type="email"] {
      border: 1px solid #cccccc; /* Same border for all */
    }
    /* Center the submit button */
    .center-submit {
      text-align: center;
    }
    input[type="number"].invalid {
    border: 2.5px solid red;
    background-color: #facaca; /* Light red background */
    }
    .exceeds-message {
    display: none;
    color: red;
    font-size: 12px;
    text-align: center;
    }
    #suggestions {
    border: 1px solid #ccc;
    max-height: 165px;
    overflow-y: auto;
    position: absolute;
    background: white;
    z-index: 1000;
    display: none;
    width: 35%;
    top: 55%;
    }
    .suggestion-item {
      padding: 8px;
      cursor: pointer;
      color: black; /* Ensure the text is black */
  }
  .suggestion-item:hover {
      background-color: #f0f0f0; /* Highlight on hover */
  }
  form {
    max-width: 500px;
    margin: auto;
    border: 2px solid navy;
    padding: 20px;
    border-radius: 10px;
    background-color: #f9f9f9;
  }
  .form-group {
    margin-bottom: 10px;
  }
  label {
    display: inline-block;
    width: 1000px;
    font-weight: bold;
  }
  input {
    font-size: 18px;
    width: calc(100% - 50px);
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  input[type="submit"] {
  background-color: #4CAF50;
  color: white;
  cursor: pointer;
  width: 150px; /* Adjust width to make it shorter */
  display: block;
  margin: 10px auto; /* Centers the button horizontally */
  padding: 8px 0;
  border: none;
  border-radius: 5px;
  text-align: center;
  }
  #unit:readonly {
    background-color: #e0e0e0; /* Light gray background when disabled */
  }
  </style>
</head>
<body>

  <nav>
    <h1>HEISEI</h1>
    <div id="nav-part2">
      <a href="camphome.html"><h3>Home</h3></a>
     <a href="camplist.html" class="active"><h3>Stock</h3></a>
     <a href="campvollist.html"><h3>Supply</h3></a>
     <a href="campinfo.html"  ><h3>Info</h3></a>
     <a href="camphistory.html"><h3>History</h3></a>
     <a href="login.html"><h3>LogOut</h3></a>
      <h2><%= username %> </h2>
    </div>
    <script>
      // Get the token from the URL
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('token');
      // Update all hyperlinks dynamically
      document.querySelectorAll('a').forEach(link => {
          const href = link.getAttribute('href');
          if (href && token) {
              link.setAttribute('href', `${href}?token=${token}`);
          }
      });
    </script>
  </nav>


  <div id="page1">

      <h2 style="color:black; margin-bottom: 20px; ">New Commodity</h2>
      <form id="camp-commodity-new" action="/campcommoditynew" method="POST" onsubmit="return preventDefaultSubmit()"> 
          <label for="commodity">Commodity:</label>
          <input type="text" name="commodity" id="commodity" placeholder="- enter -" required autocomplete="off">
          <div id="suggestions"></div>
          <p style="color: black;"><a href="campcommoditylist.html?token=<%= token %>">Click to see available commodities</a></p>
          <br>
          <label for="unit">Unit:</label>
          <input type="text" name="unit" id="unit" placeholder="- enter -" required>
          <br>
          <input type="hidden" name="token" id="token" value="<%= token %>">
          <input type="submit" value="New Commodity">
      </form> 

      <br><br>

    <% if (campData && campData.length) { %>
      <table style="font-size: 1.6em;" border="1">
        <thead>
          <tr style="color:black;">
            <th colspan="7">Stock</th>
          </tr>
          <tr style="color:black;">
            <th style="background-color: #ddd; padding: 5px;">commodityno</th>
            <th style="background-color: #ddd; padding: 5px;">commodity</th>
            <th style="background-color: #ddd; padding: 5px;">unit</th>
            <th style="background-color: #ddd; padding: 5px;">additionally requested</th>
            <th style="background-color: #ddd; padding: 5px;">stock</th>
            <th style="background-color: #ddd; padding: 5px;">request more</th>
            <th style="background-color: #ddd; padding: 5px;">within days</th>
          </tr>
        </thead>
        <tbody>
          <form id="camp-commodity-status" action="/campcommoditystatus" method="POST" onsubmit="return preventDefaultSubmit()">
          <% for (const item of campData) { %>
            <tr class="stock-row">
              <td><input type="number" name="commodityno" id="commodityno" value="<%= item.commodityno %>" readonly></td>
              <td><input type="text" name="commodity" id="commodity" value="<%= item.commodity %>" readonly></td>
              <td><input type="text" name="unit" id="unit" value="<%= item.unit %>" readonly></td>
              <td><input type="number" name="additionrequired" id="additionrequired" value="<%= item.additionrequired %>" min="0" readonly></td>
              <td><input type="number" name="stock" id="stock" value="<%= item.stock %>" min="0"></td>
              <td><input type="number" name="morerequired" id="morerequired" placeholder="- enter -" min="1"></td>
              <td><input type="number" name="expecton" id="expecton" placeholder="- enter -" min="1"></td>
            </tr>
          <% } %>
          <tr class="stock-row" >
            <td colspan="4"> </td>
            <input type="hidden" name="token" id="token" value="<%= token %>">
            <td colspan="3"><input type="submit" name="action" value="Update"></td>
          </tr>
          </form>
        </tbody>
      </table>
      <br><br><br>
      <table style="font-size: 1.6em;" border="1">
        <thead>
          <tr style="color:black;">
            <th colspan="5">Share</th>
          </tr>
          <tr style="color:black;">
            <th style="background-color: #ddd; padding: 5px;">commodityno</th>
            <th style="background-color: #ddd; padding: 5px;">commodity</th>
            <th style="background-color: #ddd; padding: 5px;">unit</th>
            <th style="background-color: #ddd; padding: 5px;">sendto</th>
            <th style="background-color: #ddd; padding: 5px;">quantity</th>
          </tr>
          <form id="camp-commodity-send" action="/campcommoditysend" method="POST" onsubmit="return preventDefaultSubmit()">
            <% for (const item of campData) { %>
              <tr class="stock-row">
                <td><input type="number" name="commodityno" id="commodityno" value="<%= item.commodityno %>" readonly></td>
                <td><input type="text" name="commodity" id="commodity" value="<%= item.commodity %>" readonly></td>
                <td><input type="text" name="unit" id="unit" value="<%= item.unit %>" readonly></td>
                <input type="hidden" name="stock" id="stock" value="<%= item.stock %>" disabled>
                <td><input type="text" name="sendto" id="sendto" placeholder="- enter -"></td>
                <td><input type="number" name="quantity" id="quantity" placeholder="- enter -" min="1"><div class="exceeds-message">quantity exceeds stock</div></td> 
              </tr>
            <% } %>
            <tr class="stock-row" >
              <td colspan="3"> </td>
              <input type="hidden" name="token" id="token" value="<%= token %>">
              <td colspan="2"><input type="submit" name="action" value="Send"></td>
            </tr>
          </form>
        </tbody>
      </table>
    <% } else if (!(campData && campData.length)) { %>
      <p>No data found.</p>
    <% } %>

    <br>
    <footer class="page-footer">
        <br><br><br><br><br><br>
    <p> </p>
    </footer>

    <script>
      const searchInput = document.getElementById('commodity');
      const suggestionsBox = document.getElementById('suggestions');
      const unitInput = document.getElementById('unit');
      // Adjust position dynamically when page is scrolled
      const rect = searchInput.getBoundingClientRect();
      suggestionsBox.style.left = `${rect.left}px`; // Align it with input field
      suggestionsBox.style.top = `${rect.bottom + window.scrollY}px`; // Position it below input

      
      let typingTimeout;

      searchInput.addEventListener('input', () => {
          const query = searchInput.value.trim();
          if (query.length === 0) {
              suggestionsBox.style.display = 'none';
              unitInput.readOnly = false; // Enable unit input when no query
              unitInput.style.backgroundColor = ''; // Reset background color when enabled
              return;
          }

          // Clear any existing timeout (to prevent multiple API calls while typing)
          clearTimeout(typingTimeout);

          // Delay the fetch to only call it after the user stops typing (debounce effect)
          typingTimeout = setTimeout(() => {
              // Fetch suggestions and check for unit
              fetch(`/search?term=${query}`)
                  .then(response => response.json())
                  .then(data => {
                      suggestionsBox.innerHTML = '';
                      if (data.length > 0) {
                          suggestionsBox.style.display = 'block';
                          data.forEach(item => {
                              const div = document.createElement('div');
                              div.className = 'suggestion-item';
                              div.textContent = item;
                              div.addEventListener('click', () => {
                                  searchInput.value = item; // Set the clicked item
                                  unitInput.readOnly = true; // Make unit input readonly after selection
                                  unitInput.style.backgroundColor = '#e0e0e0'; // Change background color to light gray
                                  suggestionsBox.style.display = 'none'; // Hide suggestions

                                  // Fetch the corresponding unit for the selected commodity
                                  fetch(`/getUnit?commodity=${item}`)
                                      .then(response => response.json())
                                      .then(unitData => {
                                          unitInput.value = unitData.unit; // Set the unit
                                      })
                                      .catch(err => console.error('Error fetching unit:', err));
                              });
                              suggestionsBox.appendChild(div);
                          });
                      } else {
                          suggestionsBox.style.display = 'none';
                          unitInput.readOnly = false; // Allow unit input when no suggestions
                          unitInput.style.backgroundColor = ''; // Reset background color when enabled
                      }
                  })
                  .catch(err => console.error('Error fetching suggestions:', err));

              // Check if the typed commodity exists in the database
              fetch(`/getUnit?commodity=${query}`)
                  .then(response => response.json())
                  .then(unitData => {
                      if (unitData.unit) {
                          unitInput.value = unitData.unit; // Set the unit
                          unitInput.readOnly = true; // Make unit input readonly if commodity is valid
                          unitInput.style.backgroundColor = '#e0e0e0'; // Change background color to light gray
                      } else {
                          unitInput.value = ''; // Clear the unit field if no matching commodity found
                          unitInput.readOnly = false; // Allow user to type the unit if no match
                          unitInput.style.backgroundColor = ''; // Reset background color when enabled
                      }
                  })
                  .catch(err => console.error('Error fetching unit:', err));
          }, 500); // Delay after the user stops typing (500ms)
      });

      document.addEventListener('click', (e) => {
          if (!suggestionsBox.contains(e.target) && e.target !== searchInput) {
              suggestionsBox.style.display = 'none'; // Hide suggestions when clicking outside
          }
      });
  </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('input[name="quantity"]').forEach((quantityInput) => {
          quantityInput.addEventListener('input', (event) => {
            const row = event.target.closest('tr'); // Get the current row
            const stock = parseInt(row.querySelector('input[name="stock"]').value, 10);
            const quantity = parseInt(event.target.value, 10);
            const exceedsMessage = row.querySelector('.exceeds-message');
    
            if (quantity > stock) {
              //event.target.style.backgroundColor = "red";
              if (exceedsMessage) exceedsMessage.style.display = "block";
            } else {
              //event.target.style.backgroundColor = "";
              if (exceedsMessage) exceedsMessage.style.display = "none";
            }
          });
        });
      });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // Select all quantity input fields
        const quantityInputs = document.querySelectorAll('input[name="quantity"]');
    
        // Attach an event listener to each quantity input
        quantityInputs.forEach((input) => {
          // Get the corresponding stock value from the same row
          const stock = parseInt(
            input.closest('tr').querySelector('input[name="stock"]').value,
            10
          );
    
          // Add an input event listener for real-time validation
          input.addEventListener('input', function () {
            if (this.value !== '' && parseInt(this.value, 10) > stock) {
              this.classList.add('invalid'); // Mark as invalid if exceeds stock
            } else {
              this.classList.remove('invalid'); // Remove invalid styling
            }
          });
        });
      });
    </script>

    <script>
        // Wait for the DOM content to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Get the form element
            var form = document.getElementById('camp-commodity-status');

            // Add event listener for form submission
            form.addEventListener('submit', function(event) {
              let isValid22 = true; 

              // Check if quantity exceeds stock
              const rows1 = document.querySelectorAll('tr.stock-row');
              rows1.forEach(row => {
                const moreInput = row.querySelector('input[name="morerequired"]');
                const expectInput = row.querySelector('input[name="expecton"]');

                if ((moreInput?.value.trim() || expectInput?.value.trim()) && 
                    (!moreInput?.value.trim() || !expectInput?.value.trim())) {
                  isValid22 = false;
                }
              });

              if (!isValid22) {
                alert("Both 'request more' and 'within days' must be filled.");
                event.preventDefault(); // Prevent form submission
                return;
              }

              const okCancel = confirm("You are placing a request.\nDo you want to proceed?");
              if (!okCancel) {
                event.preventDefault(); // Prevent submission
                return; 
              }
            
               // event.preventDefault(); // Prevent the default form submission
              function preventDefaultSubmit() {
                event.preventDefault();    
                    // Collect form data
                    var formData = new FormData(form);
                    
                    // Log form data to console for debugging (optional)
                    console.log('Form Data:', formData);
    
                    // Send form data to the server using fetch API
                    fetch('/campcommoditystatus', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            
                           // window.location.href = "index.html";
                        }
                        else{
                            // Optional: Redirect to login.html after successful signup (handled by app.js)
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    })
                    .then(response => response.json()) // Parse JSON response
                    .then(data => {
                        console.log(data); // Log the response from the server
                        // Optionally, you can redirect the user to another page upon successful signup
                        //window.location.href = 'index.html';
                        if (data.redirectTo) {
                           // window.location.href = data.redirectTo; // Redirect based on server response
                            }
                            else {
                                console.error('Error:', data.message || 'Unknown error');
                            }
                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    });
                    return false;
                  }
                });
        });
         // Prevent default form submission
        
    </script>

<script>
  // Wait for the DOM content to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
      // Get the form element
      var form = document.getElementById('camp-commodity-send');

      // Add event listener for form submission
      form.addEventListener('submit', function(event) {
        let isValid1 = true; // Flag to check if quantity does not exceed stock
        let isValid2 = true; // Flag to check if both 'sendto' and 'quantity' are filled

        // Check if quantity exceeds stock
        const rows = document.querySelectorAll('tr.stock-row');
        rows.forEach(row => {
          const sendtoInput = row.querySelector('input[name="sendto"]');
          const quantityInput = row.querySelector('input[name="quantity"]');
          const stockInput = row.querySelector('input[name="stock"]');
          const stock = parseFloat(stockInput?.value || 0);
          const quantity = parseFloat(quantityInput?.value || 0);

          // Check if quantity exceeds stock
          if (quantity > stock) {
            isValid1 = false;
          }

          // Check if both 'sendto' and 'quantity' are filled when one is filled
          if ((sendtoInput?.value.trim() || quantityInput?.value.trim()) && 
              (!sendtoInput?.value.trim() || !quantityInput?.value.trim())) {
            isValid2 = false;
          }
        });

        if (!isValid1) {
          alert('Cannot proceed when quantity is higher than stock.');
          event.preventDefault(); // Prevent form submission
          return;
        }

        if (!isValid2) {
          alert("Both 'sendto' and 'quantity' must be filled.");
          event.preventDefault(); // Prevent form submission
          return;
        }
      //////////////////////
        const okCancel = confirm("Do you want to proceed?");
        if (!okCancel) {
          event.preventDefault(); // Prevent submission
          return; 
        }
         // event.preventDefault(); // Prevent the default form submission
        function preventDefaultSubmit() {
          event.preventDefault();    
              // Collect form data
              var formData = new FormData(form);
              
              // Log form data to console for debugging (optional)
              console.log('Form Data:', formData);

              // Send form data to the server using fetch API
              fetch('/campcommoditysend', {
                  method: 'POST',
                  body: formData
              })
              .then(response => {
                  if (response.ok) {
                      
                     // window.location.href = "index.html";
                  }
                  else{
                      // Optional: Redirect to login.html after successful signup (handled by app.js)
                      throw new Error('Network response was not ok');
                  }
                  return response.text();
              })
              .then(response => response.json()) // Parse JSON response
              .then(data => {
                  console.log(data); // Log the response from the server
                  // Optionally, you can redirect the user to another page upon successful signup
                  //window.location.href = 'index.html';
                  if (data.redirectTo) {
                     // window.location.href = data.redirectTo; // Redirect based on server response
                      }
                      else {
                          console.error('Error:', data.message || 'Unknown error');
                      }
              })
              .catch(error => {
                  console.error('There was a problem with the fetch operation:', error);
              });
              return false;
                }
              

            });
        });
         // Prevent default form submission
        
    </script>

<script>
  // Wait for the DOM content to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
      // Get the form element
      var form = document.getElementById('camp-commodity-new');

      // Add event listener for form submission
      form.addEventListener('submit', function(event) {
        const okCancel = confirm("Do you want to proceed?");
              if (!okCancel) {
                event.preventDefault(); // Prevent submission
                return; 
              }
         // event.preventDefault(); // Prevent the default form submission
      function preventDefaultSubmit() {
          event.preventDefault();    
              // Collect form data
              var formData = new FormData(form);
              
              // Log form data to console for debugging (optional)
              console.log('Form Data:', formData);

              // Send form data to the server using fetch API
              fetch('/campcommoditynew', {
                  method: 'POST',
                  body: formData
              })
              .then(response => {
                  if (response.ok) {
                      
                     // window.location.href = "index.html";
                  }
                  else{
                      // Optional: Redirect to login.html after successful signup (handled by app.js)
                      throw new Error('Network response was not ok');
                  }
                  return response.text();
              })
              .then(response => response.json()) // Parse JSON response
              .then(data => {
                  console.log(data); // Log the response from the server
                  // Optionally, you can redirect the user to another page upon successful signup
                  //window.location.href = 'index.html';
                  if (data.redirectTo) {
                     // window.location.href = data.redirectTo; // Redirect based on server response
                      }
                      else {
                          console.error('Error:', data.message || 'Unknown error');
                      }
              })
              .catch(error => {
                  console.error('There was a problem with the fetch operation:', error);
              });
              return false;
  }
      });
  });
   // Prevent default form submission  
</script>
  </div>

</body>
</html>
