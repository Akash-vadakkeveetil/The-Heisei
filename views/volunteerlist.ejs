<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Volunteer-List</title>
  <link rel="stylesheet" href="donor.css">
  <style>
    /* General table styles */
    table {
      width: 100%;
      border-collapse: collapse;
      background-color: #ffffff;
      color: white;
    }
  
    /* Style table rows and cells */
    .stock-row {
      color: white;
    }
  
    td {
      padding: 8px;
      text-align: center; /* Center-align all cells */
      border: 1px solid #555; 
      font-size: 16px;
    }
  
    /* Universal style for all form controls */
    input, select, textarea {
      width: 90%; /* Adjust the width for uniformity */
      padding: 4px;
      text-align: center;
      border: 1px solid #ffffff;
      border-radius: 4px;
      font-size: 16px;
      background-color: #ffffff; /* Light background for visibility */
      color: #333; /* Dark text for readability */
    }
  
    /* Style submit button */
    input[type="submit"] {
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
      border: none;
      padding: 6px 12px;
      border-radius: 5px;
      text-align: center;
      display: inline-block;
      margin: auto;
      width: 120px;
    }
    input[type="text"],
    input[type="date"],
    input[type="number"],
    input[type="password"],
    input[type="email"] {
      border: 1px solid #cccccc; /* Same border for all */
    }
    /* Center the submit button */
    .center-submit {
      text-align: center;
    }
    button {
      background-color: #e5e5e5;
      color: rgb(0, 0, 0);
      cursor: pointer;
      border-width:2px;
      border-color: black;
      padding: 5px 12px;
      border-radius: 5px;
      text-align: center;
      display: inline-block;
      margin: auto;
      width: 120px;
    }
    /* Preloader styles */
  #preloader {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #2c195e; /* Dark background */
      display: none; /* Hidden by default */
      justify-content: center;
      align-items: center;
      z-index: 9999; /* Ensure it stays on top */
    }

    .loader {
      border: 6px solid #f3f3f3; /* Light border */
      border-top: 6px solid #4caf50; /* Spinner color */
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>  
</head>
<body>

  <nav>
    <h1>HEISEI</h1>
    <div id="nav-part2">
      <a href="volunteerhome.html"><h3>Home</h3></a>
     <a href="volunteerlist.html" class="active"><h3>Supply</h3></a>
     <a href="volunteerstock.html"><h3>Stock</h3></a>
     <a href="volunteerrequest.html" class="volunteer-link"><h3>Requests</h3></a>
     <a href="volunteerseeothers.html" class="volunteer-link"><h3>Search</h3></a>
     <a href="volunteerhistory.html"><h3>History</h3></a>
      <a href="login.html"><h3>LogOut</h3></a>
      <h2><%= username %> </h2>
    </div>
    <script>
      // Get the token from the URL
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('token');
      // Update all hyperlinks dynamically
      document.querySelectorAll('a').forEach(link => {
          const href = link.getAttribute('href');
          if (href && token) {
              link.setAttribute('href', `${href}?token=${token}`);
          }
      });
    </script>
  </nav>


  <div id="page1">

    <div id="preloader">
      <div class="loader"></div>
      Loading time depends on your Network Connectivity.
    </div>

<h1>Status</h1>

    <% if (volunteerData && volunteerData.length) { %>
      <table style="font-size: 1.6em;" border="1">
        <thead>
          <tr style="color:black;">
            <th style="background-color: #ddd; padding: 5px;">receiveno</th>
            <th style="background-color: #ddd; padding: 5px;">commodityno</th>
            <th style="background-color: #ddd; padding: 5px;">commodity</th>
            <th style="background-color: #ddd; padding: 5px;">quantity</th>
            <th style="background-color: #ddd; padding: 5px;">unit</th>
            <th style="background-color: #ddd; padding: 5px;">receivedfrom</th>
            <th style="background-color: #ddd; padding: 5px;">date</th>
            <th style="background-color: #ddd; padding: 5px;">status</th>
          </tr>
        </thead>
        <tbody>
          <form id="volunteer-commodity-status" action="/volunteercommoditystatus" method="POST" onsubmit="return preventDefaultSubmit()">
          <% for (const item of volunteerData.reverse()) { %>
          
          <tr class="stock-row">
            <% if (item.status === "Received") { %>
            <td><input type="number" name="receiveno" id="receiveno" value="<%= item.receiveno %>" disabled></td>
            <td><input type="number" name="commodityno" id="commodityno" value="<%= item.commodityno %>" disabled></td>
            <td><input type="text" name="commodity" id="commodity" value="<%= item.commodity %>" disabled></td>
            <td><input type="number" name="quantity" id="quantity" value="<%= item.quantity %>" disabled></td>
            <td><input type="text" name="unit" id="unit" value="<%= item.unit %>" disabled></td>
            <td><input type="text" name="receivedfrom" id="receivedfrom" value="<%= item.receivedfrom %>" disabled></td>
            <td><input type="date" name="date" id="date" value="<%= new Date(item.date).toLocaleDateString('en-CA') %>" disabled></td>
            <td><input type="text" name="status" id="status" value="<%= item.status %>" disabled></td> 
            <% } 
            else if (item.status === "Not_available") { %>
            <td><input type="number" name="receiveno" id="receiveno" value="<%= item.receiveno %>" readonly></td>
            <td><input type="number" name="commodityno" id="commodityno" value="<%= item.commodityno %>" disabled></td>
            <td><input type="text" name="commodity" id="commodity" value="<%= item.commodity %>" disabled></td>
            <td><input type="number" name="quantity" id="quantity" value="<%= item.quantity %>" disabled></td>
            <td><input type="text" name="unit" id="unit" value="<%= item.unit %>" disabled></td>
            <td><input type="text" name="receivedfrom" id="receivedfrom" value="<%= item.receivedfrom %>" disabled></td>
            <td><input type="date" name="date" id="date" value="<%= new Date(item.date).toLocaleDateString('en-CA') %>" disabled></td>
            <td>
              <select name="status" id="status">
                <option value="Not_available">Not_available</option> 
                <option value="Received">Received</option>
              </select>
            </td>
            <% } %>
          </tr>
          <% } %>
          <tr class="stock-row" >
            <td colspan="7"> </td>
            <input type="hidden" name="token" id="token" value="<%= token %>">
            <td><button id="clear-storage" type="button">Clear All</button>  <input type="submit" value="Update Status"></td>
          </tr>
          </form>
        </tbody>
      </table>
    <% } else if (!(volunteerData && volunteerData.length)) { %>
      <p>No data found.</p>
    <% } %>

      <footer class="page-footer">
        <br><br><br><br><br><br>
    <p> </p>
    </footer>

    <script>
  document.querySelectorAll('.volunteer-link').forEach(link => {
    link.addEventListener('click', function (event) {
      document.getElementById('preloader').style.display = 'flex';
    });
  });
</script>

      <script>
        // Wait for the DOM content to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Get the form element
            var form = document.getElementById('volunteer-commodity-status');

            // Add event listener for form submission
            form.addEventListener('submit', function(event) {
              const okCancel = confirm("Do you want to proceed?");
              if (!okCancel) {
                event.preventDefault(); // Prevent submission
                return; 
              }
               // event.preventDefault(); // Prevent the default form submission
            function preventDefaultSubmit() {
                event.preventDefault();    
                    // Collect form data
                    var formData = new FormData(form);
                    
                    // Log form data to console for debugging (optional)
                    console.log('Form Data:', formData);
    
                    // Send form data to the server using fetch API
                    fetch('/volunteercommoditystatus', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            
                           // window.location.href = "index.html";
                        }
                        else{
                            // Optional: Redirect to login.html after successful signup (handled by app.js)
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    })
                    .then(response => response.json()) // Parse JSON response
                    .then(data => {
                        console.log(data); // Log the response from the server
                        // Optionally, you can redirect the user to another page upon successful signup
                        //window.location.href = 'index.html';
                        if (data.redirectTo) {
                           // window.location.href = data.redirectTo; // Redirect based on server response
                            }
                            else {
                                console.error('Error:', data.message || 'Unknown error');
                            }
                    })
                    .catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    });
                    return false;
        }
            });
        });
         // Prevent default form submission    
    </script>

    <script>
    // Function to restore values from sessionStorage upon page load
    window.onload = function() {
      // Auto-refresh the page every 15 seconds
      setTimeout(function() {
        location.reload();
      }, 30000); // Refresh every 30 seconds
    }
  </script>
    <script>
  document.addEventListener('DOMContentLoaded', function () {

      // Select all quantity input fields
      const statusInputs = document.querySelectorAll('select[name="status"]');
        // Attach an event listener to each quantity input
        statusInputs.forEach((input) => {
          // Get the corresponding stock value from the same row
          const name =input.closest('tr').querySelector('input[name="receiveno"]').value;
          // Add an input event listener for real-time validation
          input.addEventListener('change', function () {
            sessionStorage.setItem(name, this.value);
          });
      });
      statusInputs.forEach((input) => {
        // Get the corresponding stock value from the same row
        const name = input.closest('tr').querySelector('input[name="receiveno"]').value;
        // Check if a value is stored for this commodity and set it as the input's value
        const storedValue = sessionStorage.getItem(name);
        if (storedValue) {
          input.value = storedValue;
        }
        });

          // Clear sessionStorage on form submission
        const form = document.querySelector('form');
        if (form) {
          form.addEventListener('submit', function () {
            sessionStorage.clear();
          });
        }

         // Add functionality to clear sessionStorage with a button
        const clearButton = document.querySelector('#clear-storage');
        if (clearButton) {
          clearButton.addEventListener('click', function () {
            sessionStorage.clear();
            location.reload();
          });
        }

  });
</script>

  </div>

</body>
</html>
